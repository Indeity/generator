/**
 *    Copyright 2006-2019 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.mybatis.generator.plugins;

import static org.mybatis.generator.plugins.CreateGenericInterfacePlugin.formatLines;

import java.util.ArrayList;
import java.util.List;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.GeneratedKey;
import org.mybatis.generator.internal.util.StringUtility;

/**
 * simple batch insert, based on mysql with mybatis3, with blobs
 * <pre>
 *   &lt;plugin type="org.mybatis.generator.plugins.BatchInsertPlugin" /&gt;
 * </pre>
 *
 */
public class BatchInsertPlugin extends PluginAdapter {

  public static final String METHOD_NAME = "methodName";

  private String batchInsert = "insertAll";  // method name

  private CreateGenericInterfacePlugin genericPlugin;

  @Override
  public boolean validate(List<String> warnings) {
    if (!"com.mysql.jdbc.Driver".equalsIgnoreCase(getContext()
        .getJdbcConnectionConfiguration().getDriverClass())) {
      warnings.add("BatchInsertPlugin only support mysql!");
      return false;
    }

    String name = properties.getProperty(METHOD_NAME);
    if (StringUtility.stringHasValue(name)) {
      batchInsert = name;
    }

    // check if CreateGenericInterfacePlugin is enabled
    genericPlugin = CreateGenericInterfacePlugin.getInstance(getContext());
    if (genericPlugin == null) {
      warnings.add("CreateGenericInterfacePlugin not enabled");
      return false;
    }

    return true;
  }

  @Override
  public boolean clientGenerated(Interface interfaze, IntrospectedTable introspectedTable) {
    // if not add batchInsert method yet
    if (!genericPlugin.methodsAdded.contains(batchInsert)) {
      // create method
      Method method = new Method(batchInsert);
      method.setAbstract(true);
      method.setVisibility(JavaVisibility.DEFAULT);
      method.setReturnType(FullyQualifiedJavaType.getIntInstance());
      method.addParameter(new Parameter(genericPlugin.genericModelList,
          "records", "@Param(\"records\")"));

      // set method to interfaze
      genericPlugin.methodsAdded.add(method.getName());
      genericPlugin.genericInterface.addMethod(method);
      genericPlugin.genericInterface
          .addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.Param"));
    }
    return true;
  }

  @Override
  public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
    // create insert element
    XmlElement batchInsertEle = new XmlElement("insert");
    batchInsertEle.addAttribute(new Attribute("id", batchInsert));
    // parameter type no needed here
//    batchInsertEle.addAttribute(new Attribute("parameterType", "list"));

    // ignore comment here, just use multi xml for one mapper(this one belongs to autogenerated)
    // when generate with -overwrite, @see XmlFileMergerJaxp.isGeneratedNode may check OLD_ELEMENT_TAGS, e.g.@mbg.generated
//    getContext().getCommentGenerator().addComment(batchInsertEle);

    // check if auto generated keys
    GeneratedKey gk = introspectedTable.getGeneratedKey();
    if (gk != null) {
      IntrospectedColumn gkColumn = introspectedTable.getColumn(gk.getColumn());
      if (gkColumn != null) {
        batchInsertEle.addAttribute(new Attribute("useGeneratedKeys", "true"));
        batchInsertEle.addAttribute(new Attribute("keyProperty", gkColumn.getJavaProperty()));
        batchInsertEle.addAttribute(new Attribute("keyColumn", gkColumn.getActualColumnName()));
      }
    }

    // insert content
    batchInsertEle.addElement(new TextElement("insert into "
        + introspectedTable.getFullyQualifiedTableNameAtRuntime()));

    // add columns
    List<String> columns = new ArrayList<>();
    for (IntrospectedColumn column : introspectedTable.getAllColumns()) {
      columns.add(column.getActualColumnName());
    }
    formatLines(batchInsertEle, columns, ',', true, 1);

    // add values
    batchInsertEle.addElement(new TextElement(" values "));

    // add foreach
    XmlElement foreachElement = new XmlElement("foreach");
    foreachElement.addAttribute(new Attribute("collection", "records"));
    foreachElement.addAttribute(new Attribute("item", "item"));
    foreachElement.addAttribute(new Attribute("separator", ","));
    columns.clear();
    for (IntrospectedColumn column : introspectedTable.getAllColumns()) {
      columns.add(String.format("#{item.%s,jdbcType=%s}", column.getJavaProperty(),
          column.getJdbcTypeName()));
    }
    formatLines(foreachElement, columns, ',', true, 1);
    batchInsertEle.addElement(foreachElement);

    // add to root
    document.getRootElement().addElement(batchInsertEle);
    return true;
  }

}